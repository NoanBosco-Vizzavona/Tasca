# -*- coding: utf-8 -*-
"""AraT5_Marocco.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pJWUmi6cR7vSTa-eedNpDDvRBuBR_IAA
"""

import pandas as pd
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
from sklearn.metrics import classification_report
import torch
from tqdm import tqdm

# ✅ Chargement du modèle depuis Hugging Face
model_name = "Noanihio/Ara_mar2_token_10ep"
model = AutoModelForSeq2SeqLM.from_pretrained(model_name).to("cuda")
tokenizer = AutoTokenizer.from_pretrained(model_name)

# ✅ Chargement du dataset de test
df_test = pd.read_csv("/content/test_final_tashkeel_MAR2.csv")

# 🧠 Fonction de prédiction
def predict_sentiment(darja, tashkeel):
    prompt = f"sentiment: [Darja]: {darja} [Tashkīl]: {tashkeel}"
    inputs = tokenizer(prompt, return_tensors="pt", padding=True, truncation=True).to("cuda")
    outputs = model.generate(**inputs)
    return tokenizer.decode(outputs[0], skip_special_tokens=True).strip().lower()

# 🕐 Prédictions avec et sans tashkeel
preds_with, preds_without = [], []

for _, row in tqdm(df_test.iterrows(), total=len(df_test)):
    with_tash = predict_sentiment(row["tweet"], row["text_catt"])
    without_tash = predict_sentiment(row["tweet"], "")
    preds_with.append(with_tash)
    preds_without.append(without_tash)

# Ajout des prédictions
df_test["predicted_with"] = preds_with
df_test["predicted_without"] = preds_without

print(df_test.head())

# Harmoniser les labels pour comparaison
label_map = {

    0: "neutral",
    1: "positive",
    2: "negative",
    "positive": "positive",
    "negative": "negative",
    "neutral": "neutral"
}
df_test["label"] = df_test["label"].map(label_map)

print(df_test.head())

# 🧾 Rapport de classification
report_with = classification_report(df_test["label"], df_test["predicted_with"], digits=3)
report_without = classification_report(df_test["label"], df_test["predicted_without"], digits=3)

# Sauvegarde pour analyse
df_test.to_csv("/content/TestDZLLaMa_results.tsv", sep="\t", index=False)

report_with, report_without

df_test = pd.read_csv("/content/TestDZLLaMa_results.tsv", sep="\t")

# ✅ Nettoyage des labels et prédictions
def clean_label(val):
    str_val = str(val).strip()
    if str_val in ["0", "neutral"]:
        return "neutral"
    elif str_val in ["1", "positive"]:
        return "positive"
    elif str_val in ["2", "negative"]:
        return "negative"
    else:
        return None  # Pour éviter les NaN illégitimes

for col in ["label", "predicted_with", "predicted_without"]:
    df_test[col] = df_test[col].apply(clean_label)

print(df_test.head())

print("\n📊 Rapport AVEC Tashkīl")
print(report_with)

print("\n📊 Rapport SANS Tashkīl")
print(report_without)